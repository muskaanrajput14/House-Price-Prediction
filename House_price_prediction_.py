# -*- coding: utf-8 -*-
"""House Price Prediction .ipynb

Automatically generated by Colaboratory.
# **Importing the libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""# **Importing the dataset**"""

house_price_dataset = sklearn.datasets.fetch_california_housing()

print(house_price_dataset)

# Loading the dataset to a pandas dataframe
house_price_dataframe = pd.DataFrame(house_price_dataset.data, columns = house_price_dataset.feature_names)

# print first 5 rows of dataframe
house_price_dataframe.head()

# checking the number od rows and columns in the dataframe
house_price_dataframe.shape

# checking for missing values
house_price_dataframe.isnull().sum()

# statistical measures of the dataset
house_price_dataframe.describe()

"""# **Understanding the correlation between various features of the dataset**

1.   **Positive Correlation -->** one variable increases then the other variable also increases
2.   **Negative Correlation -->** one variable decreases then the other variable also decreases


"""

correlation = house_price_dataframe.corr()

# constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt=".1f", annot=True, annot_kws={'size':10}, cmap="Blues")

"""***Spliting the data and target***"""

X = house_price_dataframe.drop(['price'], axis=1)
Y = house_price_dataframe['price']

print(X)

print(Y)

"""# **Spliting the data into training and test data**"""

X_train , X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""# **Model training**

# **XGBoost Regressor**
"""

# load the model
model = XGBRegressor()

# training the model with X_train
model.fit(X_train, Y_train)

"""# **Evaluation**

# **Prediction on training data**
"""

# accuracy for prediciton on training data
training_data_prediciton = model.predict(X_train)

print(X_train)

# R squared error
score_1 = metrics.r2_score(Y_train, training_data_prediciton)

# Mean Absolute error
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediciton)
print("R sqaured error: ", score_1)
print("Mean Absolute error: ", score_2)
# lower the mae, better is the model

"""# **Visualzing the actual Prices and predicted prices**"""

plt.scatter(Y_train, training_data_prediciton)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Price vs Predicted Price")
plt.show()

"""# **Prediction on Test Data**"""

# accuracy for prediciton on test data
test_data_prediciton = model.predict(X_test)

print(X_test)

# R squared error
score_1 = metrics.r2_score(Y_test, test_data_prediciton)
# Mean Absolute error
score_2 = metrics.mean_absolute_error(Y_test, test_data_prediciton)
print("R sqaured error: ", score_1)
print("Mean Absolute error: ", score_2)
# lower the mae, better is the model